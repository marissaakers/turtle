"""empty message

Revision ID: 02d9d7c801a1
Revises: 37cd63d5cc85
Create Date: 2020-01-12 13:35:31.589563

"""
from alembic import op
import sqlalchemy as sa


# revision identifiers, used by Alembic.
revision = '02d9d7c801a1'
down_revision = '37cd63d5cc85'
branch_labels = None
depends_on = None


def upgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('metadata',
    sa.Column('metadata_id', sa.Integer(), nullable=False),
    sa.Column('metadata_date', sa.Date(), nullable=True),
    sa.Column('metadata_location', sa.Text(), nullable=True),
    sa.Column('metadata_investigators', sa.Text(), nullable=True),
    sa.Column('number_of_cc_captured', sa.Integer(), nullable=True),
    sa.Column('number_of_cm_captured', sa.Integer(), nullable=True),
    sa.Column('number_of_other_captured', sa.Integer(), nullable=True),
    sa.PrimaryKeyConstraint('metadata_id')
    )
    op.create_table('turtle',
    sa.Column('turtle_id', sa.Integer(), nullable=False),
    sa.PrimaryKeyConstraint('turtle_id')
    )
    op.create_table('clutch',
    sa.Column('clutch_id', sa.Integer(), nullable=False),
    sa.Column('turtle_id', sa.Integer(), nullable=False),
    sa.Column('clutch_deposited', sa.Boolean(), nullable=True),
    sa.Column('sand_type', sa.String(length=50), nullable=True),
    sa.Column('placement', sa.String(length=50), nullable=True),
    sa.Column('emergence_date', sa.Date(), nullable=True),
    sa.Column('inventory_date', sa.Date(), nullable=True),
    sa.Column('hidden_stake_in_place', sa.Boolean(), nullable=True),
    sa.Column('obvious_stake_in_place', sa.Boolean(), nullable=True),
    sa.Column('emergence', sa.Boolean(), nullable=True),
    sa.Column('s_can_in_place', sa.Boolean(), nullable=True),
    sa.Column('n_can_in_place', sa.Boolean(), nullable=True),
    sa.Column('predated', sa.Boolean(), nullable=True),
    sa.Column('post_hatch', sa.Boolean(), nullable=True),
    sa.Column('washed_over', sa.Boolean(), nullable=True),
    sa.Column('inundated', sa.Boolean(), nullable=True),
    sa.Column('washed_out', sa.String(length=20), nullable=True),
    sa.Column('washed_out_post_hatch', sa.Boolean(), nullable=True),
    sa.Column('poached', sa.Boolean(), nullable=True),
    sa.Column('inventoried_by', sa.String(length=40), nullable=True),
    sa.Column('entered_by', sa.String(length=40), nullable=True),
    sa.Column('entered_date', sa.Date(), nullable=True),
    sa.Column('verified_by', sa.String(length=40), nullable=True),
    sa.Column('verified_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['turtle_id'], ['turtle.turtle_id'], ),
    sa.PrimaryKeyConstraint('clutch_id')
    )
    op.create_table('encounter',
    sa.Column('encounter_id', sa.Integer(), nullable=False),
    sa.Column('metadata_id', sa.Integer(), nullable=False),
    sa.Column('turtle_id', sa.Integer(), nullable=False),
    sa.Column('encounter_date', sa.Date(), nullable=True),
    sa.Column('encounter_time', sa.Time(), nullable=True),
    sa.Column('species', sa.String(length=30), nullable=True),
    sa.Column('investigated_by', sa.String(length=30), nullable=True),
    sa.Column('entered_by', sa.String(length=30), nullable=True),
    sa.Column('entered_date', sa.Date(), nullable=True),
    sa.Column('verified_by', sa.String(length=30), nullable=True),
    sa.Column('verified_date', sa.Date(), nullable=True),
    sa.ForeignKeyConstraint(['metadata_id'], ['metadata.metadata_id'], ),
    sa.ForeignKeyConstraint(['turtle_id'], ['turtle.turtle_id'], ),
    sa.PrimaryKeyConstraint('encounter_id')
    )
    op.create_table('environment',
    sa.Column('environment_id', sa.Integer(), nullable=False),
    sa.Column('metadata_id', sa.Integer(), nullable=False),
    sa.Column('water_sample', sa.Boolean(), nullable=True),
    sa.Column('wind_speed', sa.Float(precision=5), nullable=True),
    sa.Column('wind_dir', sa.String(length=20), nullable=True),
    sa.Column('environment_time', sa.Time(), nullable=True),
    sa.Column('weather', sa.String(length=100), nullable=True),
    sa.Column('air_temp', sa.Float(precision=5), nullable=True),
    sa.Column('water_temp_surface', sa.Float(precision=5), nullable=True),
    sa.Column('water_temp_1_m', sa.Float(precision=5), nullable=True),
    sa.Column('water_temp_2_m', sa.Float(precision=5), nullable=True),
    sa.Column('water_temp_6_m', sa.Float(precision=5), nullable=True),
    sa.Column('water_temp_bottom', sa.Float(precision=5), nullable=True),
    sa.Column('salinity_surface', sa.Float(precision=5), nullable=True),
    sa.Column('salinity_1_m', sa.Float(precision=5), nullable=True),
    sa.Column('salinity_2_m', sa.Float(precision=5), nullable=True),
    sa.Column('salinity_6_m', sa.Float(precision=5), nullable=True),
    sa.Column('salinity_bottom', sa.Float(precision=5), nullable=True),
    sa.ForeignKeyConstraint(['metadata_id'], ['metadata.metadata_id'], ),
    sa.PrimaryKeyConstraint('environment_id')
    )
    op.create_table('incidental_capture',
    sa.Column('incidental_capture_id', sa.Integer(), nullable=False),
    sa.Column('metadata_id', sa.Integer(), nullable=False),
    sa.Column('species', sa.String(length=40), nullable=True),
    sa.Column('capture_time', sa.Time(), nullable=True),
    sa.Column('measurement', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['metadata_id'], ['metadata.metadata_id'], ),
    sa.PrimaryKeyConstraint('incidental_capture_id')
    )
    op.create_table('net',
    sa.Column('net_id', sa.Integer(), nullable=False),
    sa.Column('metadata_id', sa.Integer(), nullable=False),
    sa.Column('net_number', sa.Integer(), nullable=True),
    sa.Column('net_deploy_start_time', sa.Time(), nullable=True),
    sa.Column('net_deploy_end_time', sa.Time(), nullable=True),
    sa.Column('net_retrieval_start_time', sa.Time(), nullable=True),
    sa.Column('net_retrieval_end_time', sa.Time(), nullable=True),
    sa.ForeignKeyConstraint(['metadata_id'], ['metadata.metadata_id'], ),
    sa.PrimaryKeyConstraint('net_id')
    )
    op.create_table('tag',
    sa.Column('tag_id', sa.Integer(), nullable=False),
    sa.Column('turtle_id', sa.Integer(), nullable=False),
    sa.Column('tag_number', sa.String(length=30), nullable=True),
    sa.Column('location', sa.String(length=2), nullable=True),
    sa.Column('active', sa.Boolean(), nullable=True),
    sa.Column('tag_type', sa.String(length=30), nullable=True),
    sa.ForeignKeyConstraint(['turtle_id'], ['turtle.turtle_id'], ),
    sa.PrimaryKeyConstraint('tag_id')
    )
    op.create_table('beach_encounter',
    sa.Column('beach_encounter_id', sa.Integer(), nullable=False),
    sa.Column('encounter_id', sa.Integer(), nullable=False),
    sa.Column('days_45', sa.Date(), nullable=True),
    sa.Column('days_70', sa.Date(), nullable=True),
    sa.Column('capture_type', sa.String(length=40), nullable=True),
    sa.Column('activity', sa.String(length=50), nullable=True),
    sa.Column('location', sa.Float(precision=5), nullable=True),
    sa.Column('location_NS', sa.String(length=1), nullable=True),
    sa.Column('lat_n', sa.Float(precision=5), nullable=True),
    sa.Column('lat_w', sa.Float(precision=5), nullable=True),
    sa.Column('site_description', sa.Text(), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['encounter_id'], ['encounter.encounter_id'], ),
    sa.PrimaryKeyConstraint('beach_encounter_id')
    )
    op.create_table('eggs',
    sa.Column('eggs_id', sa.Integer(), nullable=False),
    sa.Column('clutch_id', sa.Integer(), nullable=False),
    sa.Column('eggs_eggs', sa.Integer(), nullable=True),
    sa.Column('eggs_undeveloped', sa.Integer(), nullable=True),
    sa.Column('eggs_sampled_for_sac', sa.Integer(), nullable=True),
    sa.Column('eggs_1_4_embryo', sa.Integer(), nullable=True),
    sa.Column('eggs_2_4_embryo', sa.Integer(), nullable=True),
    sa.Column('eggs_3_4_embryo', sa.Integer(), nullable=True),
    sa.Column('eggs_4_4_embryo', sa.Integer(), nullable=True),
    sa.Column('eggs_damaged_racoons', sa.Integer(), nullable=True),
    sa.Column('eggs_damaged_ghost_crabs', sa.Integer(), nullable=True),
    sa.Column('egg_damaged_plant_roots', sa.Integer(), nullable=True),
    sa.Column('eggs_damaged_another_turtle', sa.Integer(), nullable=True),
    sa.Column('eggs_damaged_bobcat', sa.Integer(), nullable=True),
    sa.Column('eggs_damaged_other', sa.Integer(), nullable=True),
    sa.Column('eggs_damaged_plant_details', sa.Text(), nullable=True),
    sa.Column('eggs_broken', sa.Integer(), nullable=True),
    sa.Column('eggs_washout', sa.Integer(), nullable=True),
    sa.Column('eggs_other', sa.Integer(), nullable=True),
    sa.Column('eggs_other_details', sa.Text(), nullable=True),
    sa.Column('eggs_yolkless_hydrated', sa.Integer(), nullable=True),
    sa.Column('eggs_yolkless_dehydrated', sa.Integer(), nullable=True),
    sa.Column('clutch_size', sa.Integer(), nullable=True),
    sa.Column('substrate', sa.String(length=50), nullable=True),
    sa.Column('notes', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['clutch_id'], ['clutch.clutch_id'], ),
    sa.PrimaryKeyConstraint('eggs_id')
    )
    op.create_table('hatchlings',
    sa.Column('hatchlings_id', sa.Integer(), nullable=False),
    sa.Column('clutch_id', sa.Integer(), nullable=False),
    sa.Column('hatched', sa.Integer(), nullable=True),
    sa.Column('live_hatchlings', sa.Integer(), nullable=True),
    sa.Column('dead_hatchlings', sa.Integer(), nullable=True),
    sa.Column('hatchlings_emerged', sa.Integer(), nullable=True),
    sa.Column('pipped_live', sa.Integer(), nullable=True),
    sa.Column('pipped_dead', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['clutch_id'], ['clutch.clutch_id'], ),
    sa.PrimaryKeyConstraint('hatchlings_id')
    )
    op.create_table('lagoon_encounter',
    sa.Column('lagoon_encounter_id', sa.Integer(), nullable=False),
    sa.Column('encounter_id', sa.Integer(), nullable=False),
    sa.Column('living_tags', sa.Boolean(), nullable=True),
    sa.Column('other', sa.Text(), nullable=True),
    sa.Column('leeches', sa.Boolean(), nullable=True),
    sa.Column('leeches_where', sa.Text(), nullable=True),
    sa.Column('leech_eggs', sa.Boolean(), nullable=True),
    sa.Column('leech_eggs_where', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['encounter_id'], ['encounter.encounter_id'], ),
    sa.PrimaryKeyConstraint('lagoon_encounter_id')
    )
    op.create_table('morphometrics',
    sa.Column('morphometrics_id', sa.Integer(), nullable=False),
    sa.Column('turtle_id', sa.Integer(), nullable=False),
    sa.Column('encounter_id', sa.Integer(), nullable=False),
    sa.Column('curved_length', sa.Float(precision=5), nullable=True),
    sa.Column('straight_length', sa.Float(precision=5), nullable=True),
    sa.Column('minimum_length', sa.Float(precision=5), nullable=True),
    sa.Column('plastron_length', sa.Float(precision=5), nullable=True),
    sa.Column('weight', sa.Float(precision=5), nullable=True),
    sa.Column('curved_width', sa.Float(precision=5), nullable=True),
    sa.Column('straight_width', sa.Float(precision=5), nullable=True),
    sa.Column('tail_length_pl_vent', sa.Float(precision=5), nullable=True),
    sa.Column('tail_length_pl_tip', sa.Float(precision=5), nullable=True),
    sa.Column('head_width', sa.Float(precision=5), nullable=True),
    sa.Column('body_depth', sa.Float(precision=5), nullable=True),
    sa.Column('flipper_carapace', sa.Text(), nullable=True),
    sa.Column('carapace_damage', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['encounter_id'], ['encounter.encounter_id'], ),
    sa.ForeignKeyConstraint(['turtle_id'], ['turtle.turtle_id'], ),
    sa.PrimaryKeyConstraint('morphometrics_id')
    )
    op.create_table('paps',
    sa.Column('pap_id', sa.Integer(), nullable=False),
    sa.Column('encounter_id', sa.Integer(), nullable=False),
    sa.Column('paps_present', sa.Boolean(), nullable=True),
    sa.Column('number_of_paps', sa.Integer(), nullable=True),
    sa.Column('paps_regression', sa.String(length=40), nullable=True),
    sa.Column('photos', sa.Boolean(), nullable=True),
    sa.Column('pap_photos', sa.Boolean(), nullable=True),
    sa.ForeignKeyConstraint(['encounter_id'], ['encounter.encounter_id'], ),
    sa.PrimaryKeyConstraint('pap_id')
    )
    op.create_table('sample',
    sa.Column('samples_id', sa.Integer(), nullable=False),
    sa.Column('encounter_id', sa.Integer(), nullable=False),
    sa.Column('skin_1', sa.Boolean(), nullable=True),
    sa.Column('skin_1_for', sa.Text(), nullable=True),
    sa.Column('skin_2', sa.Boolean(), nullable=True),
    sa.Column('skin_2_for', sa.Text(), nullable=True),
    sa.Column('blood', sa.Boolean(), nullable=True),
    sa.Column('blood_for', sa.Text(), nullable=True),
    sa.Column('scute', sa.Boolean(), nullable=True),
    sa.Column('scute_for', sa.Text(), nullable=True),
    sa.Column('other', sa.Boolean(), nullable=True),
    sa.Column('other_for', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['encounter_id'], ['encounter.encounter_id'], ),
    sa.PrimaryKeyConstraint('samples_id')
    )
    op.create_table('trident_encounter',
    sa.Column('trident_encounter_id', sa.Integer(), nullable=False),
    sa.Column('encounter_id', sa.Integer(), nullable=False),
    sa.Column('capture_location', sa.String(length=50), nullable=True),
    sa.Column('capture_method', sa.String(length=50), nullable=True),
    sa.Column('number_on_carapace', sa.Integer(), nullable=True),
    sa.Column('living_tags', sa.Boolean(), nullable=True),
    sa.Column('other', sa.Text(), nullable=True),
    sa.Column('leeches', sa.Boolean(), nullable=True),
    sa.Column('leeches_where', sa.Text(), nullable=True),
    sa.Column('leech_eggs', sa.Boolean(), nullable=True),
    sa.Column('leech_eggs_where', sa.Text(), nullable=True),
    sa.Column('disposition_of_specimen', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['encounter_id'], ['encounter.encounter_id'], ),
    sa.PrimaryKeyConstraint('trident_encounter_id')
    )
    op.create_table('beach_dc_data',
    sa.Column('beach_dc_data_id', sa.Integer(), nullable=False),
    sa.Column('beach_encounter_id', sa.Integer(), nullable=False),
    sa.Column('outgoing_crawl_width', sa.Float(precision=5), nullable=True),
    sa.Column('yolkless_collected', sa.Boolean(), nullable=True),
    sa.Column('pink_spot_photo_taken', sa.Boolean(), nullable=True),
    sa.Column('photo_taken_by', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['beach_encounter_id'], ['beach_encounter.beach_encounter_id'], ),
    sa.PrimaryKeyConstraint('beach_dc_data_id')
    )
    op.create_table('nest_marking',
    sa.Column('nest_marking_id', sa.Integer(), nullable=False),
    sa.Column('beach_encounter_id', sa.Integer(), nullable=False),
    sa.Column('dist_to_hidden_stake', sa.Float(precision=5), nullable=True),
    sa.Column('hidden_stake_planted_in', sa.Text(), nullable=True),
    sa.Column('dist_to_obvious_stake', sa.Float(precision=5), nullable=True),
    sa.Column('obvious_stake_planted_in', sa.Text(), nullable=True),
    sa.Column('dist_to_dune', sa.Float(precision=5), nullable=True),
    sa.Column('dist_to_high_tide', sa.Float(precision=5), nullable=True),
    sa.Column('can_buried', sa.Boolean(), nullable=True),
    sa.Column('can_buried_NS', sa.String(length=1), nullable=True),
    sa.Column('scarp_over_46_cm', sa.Boolean(), nullable=True),
    sa.Column('seaward_of_structure', sa.Boolean(), nullable=True),
    sa.Column('within_1_m_of_structure', sa.Boolean(), nullable=True),
    sa.Column('structure_description', sa.Text(), nullable=True),
    sa.ForeignKeyConstraint(['beach_encounter_id'], ['beach_encounter.beach_encounter_id'], ),
    sa.PrimaryKeyConstraint('nest_marking_id')
    )
    # ### end Alembic commands ###


def downgrade():
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('nest_marking')
    op.drop_table('beach_dc_data')
    op.drop_table('trident_encounter')
    op.drop_table('sample')
    op.drop_table('paps')
    op.drop_table('morphometrics')
    op.drop_table('lagoon_encounter')
    op.drop_table('hatchlings')
    op.drop_table('eggs')
    op.drop_table('beach_encounter')
    op.drop_table('tag')
    op.drop_table('net')
    op.drop_table('incidental_capture')
    op.drop_table('environment')
    op.drop_table('encounter')
    op.drop_table('clutch')
    op.drop_table('turtle')
    op.drop_table('metadata')
    # ### end Alembic commands ###
